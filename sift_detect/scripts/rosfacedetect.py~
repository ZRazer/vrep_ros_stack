#!/usr/bin/python
"""
This program is demonstration for face and object detection using haar-like features.
The program finds faces in a camera image or video stream and displays a red box around them.

Original C implementation by:  ?
Python implementation by: Roman Stanchak, James Bowman
"""
import roslib
roslib.load_manifest('hw2')

import sys
import os
from optparse import OptionParser

import rospy
import sensor_msgs.msg
from cv_bridge import CvBridge
import cv

#import visualization_msgs.msg
#from visualization_msgs.msg import Marker

#import geometry_msgs.msg
#from geometry_msgs.msg import Point

import sensor_msgs.msg
from sensor_msgs.msg import Image
from sensor_msgs.msg import RegionOfInterest

# Parameters for haar detection
# From the API:
# The default parameters (scale_factor=2, min_neighbors=3, flags=0) are tuned 
# for accurate yet slow object detection. For a faster operation on real video 
# images the settings are: 
# scale_factor=1.2, min_neighbors=2, flags=CV_HAAR_DO_CANNY_PRUNING, 
# min_size=<minimum possible face size

min_size = (10, 10)
image_scale = 2
haar_scale = 1.2
min_neighbors = 2
haar_flags = 0

if __name__ == '__main__':

	pkgdir = roslib.packages.get_pkg_dir("opencv2")
	haarfile = "/opt/ros/fuerte/share/OpenCV/haarcascades/haarcascade_frontalface_alt.xml"

	parser = OptionParser(usage = "usage: %prog [options] [filename|camera_index]")
	parser.add_option("-c", "--cascade", action="store", dest="cascade", type="str", help="Haar cascade file, default %default", default = haarfile)
	(options, args) = parser.parse_args()

	cascade = cv.Load(options.cascade)
	br = CvBridge()
    #face_pub = rospy.Publisher('hw2/faceMarker', Marker)
	image_pub = rospy.Publisher('hw2/MarkedFaces', Image)
	region_pub = rospy.Publisher('hw2/FaceRegion', RegionOfInterest)
    
	def detect_and_draw(imgmsg):
		img = br.imgmsg_to_cv(imgmsg, "bgr8")
        # allocate temporary images
		gray = cv.CreateImage((img.width,img.height), 8, 1)
		small_img = cv.CreateImage((cv.Round(img.width / image_scale),
				cv.Round (img.height / image_scale)), 8, 1)

        # convert color input image to grayscale
		cv.CvtColor(img, gray, cv.CV_BGR2GRAY)

        # scale input image for faster processing
		cv.Resize(gray, small_img, cv.CV_INTER_LINEAR)

		cv.EqualizeHist(small_img, small_img)

		if(cascade):
			faces = cv.HaarDetectObjects(small_img, cascade, cv.CreateMemStorage(0),
                                         haar_scale, min_neighbors, haar_flags, min_size)
			if faces:
				for ((x, y, w, h), n) in faces:
                    # the input to cv.HaarDetectObjects was resized, so scale the 
                    # bounding box of each face and convert it to two CvPoints
					pt1 = (int(x * image_scale), int(y * image_scale))
					pt2 = (int((x + w) * image_scale), int((y + h) * image_scale))
					cv.Rectangle(img, pt1, pt2, cv.RGB(255, 0, 0), 3, 8, 0)
                    
                    
                    #faceMark = Marker()
		    #faceMark.color.r = 1.0
		    #faceMark.color.a = 1.0
		    #faceMark.scale.x = 100.0
		    #faceMark.scale.y = 100.0
		    #faceMark.scale.z = 100.0
		    #faceMark.type = Marker.POINTS
		    #faceMark.header.frame_id = "/frontCamera"
		    #faceMark.header.stamp = rospy.Time().now()
		    #faceMark.action = Marker.ADD
		    #faceMark.pose.orientation.w = 1.0;
                    #faceMark.points.append(Point(x+w/2,y+h/2,0))
                    #face_pub.publish(faceMark)
                    
					r = RegionOfInterest()
					r.x_offset = x
					r.y_offset = y
					r.height = h;
					r.width = w;
					r.do_rectify = False
					region_pub.publish(r)
				image_pub.publish(br.cv_to_imgmsg(img, "bgr8"))
                    

		cv.ShowImage("result", img)
		cv.WaitKey(6)

	im_ref = cv.LoadImage("HeronLorraine.jpg")
	if im_ref:
		print "cest bon"
	
	cv.ShowImage("Image de reference", im_ref)
    
	rospy.init_node('rosfacedetect')
	image_topic = "/vrep/visionSensor"
	rospy.spin()
